{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\Work\\\\Anees\\\\EA Fitness\\\\app\\\\application\\\\components\\\\CalcResult.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Icon from \"@expo/vector-icons/SimpleLineIcons\";\nimport { Text } from 'native-base';\n\nvar CalcResult = function (_Component) {\n  _inherits(CalcResult, _Component);\n\n  var _super = _createSuper(CalcResult);\n\n  function CalcResult() {\n    var _this;\n\n    _classCallCheck(this, CalcResult);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.toFeet = function (num) {\n      var realFeet = num * 0.393700 / 12;\n      var feet = Math.floor(realFeet);\n      var inches = Math.round((realFeet - feet) * 12);\n      return feet + \"'\" + inches;\n    };\n\n    _this.toLbs = function (num) {\n      var nearExact = num / 0.45359237;\n      var lbs = Math.floor(nearExact);\n      return lbs;\n    };\n\n    return _this;\n  }\n\n  _createClass(CalcResult, [{\n    key: \"render\",\n    value: function render() {\n      var height = this.props.data.height;\n      var weight = this.props.data.weight;\n      var bmi = this.props.data.bmi;\n      var bmiClass = this.props.data.bmiClass;\n      var heightFeet = this.toFeet(height);\n      var pounds = this.toLbs(weight);\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, height, \"cm\", React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, \" \", heightFeet)), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, weight, \"kg\", React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }, \" \", pounds, \"lbs\")), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, bmi), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }, bmiClass));\n    }\n  }]);\n\n  return CalcResult;\n}(Component);\n\nexport default CalcResult;","map":{"version":3,"sources":["F:/Work/Anees/EA Fitness/app/application/components/CalcResult.js"],"names":["React","Component","Icon","Text","CalcResult","toFeet","num","realFeet","feet","Math","floor","inches","round","toLbs","nearExact","lbs","height","props","data","weight","bmi","bmiClass","heightFeet","pounds"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,OAAOC,IAAP;AACA,SAAQC,IAAR,QAAmB,aAAnB;;IAEMC,U;;;;;;;;;;;;;;;;UAEJC,M,GAAS,UAACC,GAAD,EAAS;AAChB,UAAIC,QAAQ,GAAKD,GAAG,GAAG,QAAP,GAAmB,EAAnC;AACA,UAAIE,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAX;AACA,UAAII,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAW,CAACL,QAAQ,GAAGC,IAAZ,IAAoB,EAA/B,CAAb;AACA,aAAUA,IAAV,SAAkBG,MAAlB;AACD,K;;UAEDE,K,GAAQ,UAACP,GAAD,EAAS;AACf,UAAIQ,SAAS,GAAGR,GAAG,GAAC,UAApB;AACA,UAAIS,GAAG,GAAGN,IAAI,CAACC,KAAL,CAAWI,SAAX,CAAV;AACA,aAAOC,GAAP;AACD,K;;;;;;;WAED,kBAAS;AACP,UAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBF,MAA7B;AACA,UAAIG,MAAM,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,MAA7B;AACA,UAAIC,GAAG,GAAG,KAAKH,KAAL,CAAWC,IAAX,CAAgBE,GAA1B;AACA,UAAIC,QAAQ,GAAG,KAAKJ,KAAL,CAAWC,IAAX,CAAgBG,QAA/B;AAEA,UAAIC,UAAU,GAAG,KAAKjB,MAAL,CAAYW,MAAZ,CAAjB;AACA,UAAIO,MAAM,GAAG,KAAKV,KAAL,CAAWM,MAAX,CAAb;AAEA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,MADH,QAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAQM,UAAR,CAFF,CADF,EAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,MADH,QAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAQI,MAAR,QAFF,CALF,EASE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOH,GAAP,CATF,EAUE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOC,QAAP,CAVF,CADF;AAcD;;;;EAtCsBpB,S;;AAyCzB,eAAeG,UAAf","sourcesContent":["import React, { Component } from 'react'\nimport{ Dimensions, View,} from 'react-native';\nimport Icon from 'react-native-vector-icons/SimpleLineIcons';\nimport {Text} from 'native-base';\n\nclass CalcResult extends Component {\n  // convert cm into ft \n  toFeet = (num) => {\n    let realFeet = ((num * 0.393700) / 12); \n    let feet = Math.floor(realFeet); \n    let inches = Math.round((realFeet - feet) * 12); \n    return `${feet}'${inches}`; \n  }\n  // convert kg to lbs\n  toLbs = (num) => {\n    let nearExact = num/0.45359237; \n    let lbs = Math.floor(nearExact); \n    return lbs; \n  }\n\n  render() {\n    let height = this.props.data.height; \n    let weight = this.props.data.weight; \n    let bmi = this.props.data.bmi; \n    let bmiClass = this.props.data.bmiClass; \n    // conversions\n    let heightFeet = this.toFeet(height); \n    let pounds = this.toLbs(weight); \n\n    return (\n      <View>\n        <Text>\n          {height}cm\n          <Text> {heightFeet}</Text>\n        </Text>\n        <Text>\n          {weight}kg\n          <Text> {pounds}lbs</Text>  \n        </Text>\n        <Text>{bmi}</Text>\n        <Text>{bmiClass}</Text>\n      </View>\n    );\n  }\n}\n\nexport default CalcResult"]},"metadata":{},"sourceType":"module"}